# Generated by roxygen2: do not edit by hand

S3method(HSwrite,HSflow)
S3method(HSwrite,HSgrid)
S3method(HSwrite,HSrunoff)
S3method(accumulate_runoff,instant)
S3method(accumulate_runoff,muskingum)
S3method(accumulate_runoff,simple)
S3method(combine_discharge,HSflow)
S3method(combine_discharge,HSgrid)
S3method(combine_discharge,HSrunoff)
S3method(combine_discharge,HSweights)
S3method(combine_discharge,list)
S3method(ensemble_summary,HSflow)
S3method(ensemble_summary,HSgrid)
S3method(ensemble_summary,HSrunoff)
S3method(ensemble_summary,HSweights)
S3method(ensemble_summary,list)
S3method(flow_gof,HSflow)
S3method(flow_gof,list)
S3method(print,HSgrid)
S3method(summary,HSgrid)
export(HSwrite)
export(accumulate_runoff)
export(add_HSgrid)
export(combine_discharge)
export(compute_HSweights)
export(compute_area_weights)
export(compute_river_weights)
export(create_HSgrid)
export(create_HSobs)
export(create_HSweights)
export(delineate_basin)
export(downscale_runoff)
export(ensemble_summary)
export(flow_gof)
export(optimise_point)
export(optimise_region)
export(plot.HSflow)
export(plot.HSgrid)
export(plot.HSoptim)
export(raster_to_HSgrid)
export(river_hierarchy)
export(river_network)
export(river_outlets)
export(river_voronoi)
export(split_river_with_grid)
export(upstream)
import(hydroGOF)
importFrom(dplyr,"%>%")
importFrom(dplyr,bind_rows)
importFrom(quadprog,solve.QP)
importFrom(utils,setTxtProgressBar)
importFrom(utils,txtProgressBar)
useDynLib(hydrostreamer, .registration = TRUE)
