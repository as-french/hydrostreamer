% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/downstream_igraph_method.R
\name{all_simple_paths_for_complex_graphs}
\alias{all_simple_paths_for_complex_graphs}
\title{Find all node and edge paths between two nodes in an sfnetwork}
\usage{
all_simple_paths_for_complex_graphs(
  graph,
  sf_net_graph_equiv,
  from,
  to,
  mode = "in",
  verbose = FALSE,
  parallel = FALSE,
  ...
)
}
\arguments{
\item{graph}{An input graph.}

\item{sf_net_graph_equiv}{An input sf LINESTRING equivalent to the graph.}

\item{from}{The source vertex.}

\item{to}{The target vertex of vertices. Defaults to all vertices.}

\item{mode}{Character constant, gives whether the shortest paths to or from
the given vertices should be calculated for directed graphs. If out then
the shortest paths from the vertex, if ⁠in⁠ then to it will be considered.
If all, the default, then the corresponding undirected graph will be used,
i.e. not directed paths are searched. This argument is ignored for
undirected graphs.}

\item{verbose}{Boolean. Print commentary of algorithm (useful for debugging).}

\item{parallel}{Boolean. Use parallel processing through
future.apply::future_lapply}

\item{...}{Any parameters relevant to igraph::all_simple_paths.}
}
\value{
A list of unique edge paths between to and from nodes.
}
\description{
This function receives a sfnetwork directed LINESTRING that
  describes a river network with lookup list within an attribute tibble and
  corresponding directed acyclic graph (DAG) igraph component of nodes and
  edges. Follow examples to prepare an appropriate sfnetwork object. The
  function returns a list of paths. Note param descriptions below are copied
  from igraph::all_simple_paths.
}
\details{
The primary motivation for this function is to provide a packaged
  method for finding all possible "edge" paths between nodes on a directed
  acyclic graph that contains multiple edges (but not loops). Thus, this
  function fills the gap left by igraph::all_simple_paths, which only returns
  node paths for complex graphs. This function is intended to facilitate
  river network analyses for river systems that contain braids/islands and/or
  multiple outlets, not "simple" dendritic (e.g., in relation to in-stream
  barriers). See other packages (e.g., riverconn), for analysis of simple
  dendritic graphs/river networks (e.g., CCM2).

  Note - Take care with direction of LINESTRINGs. Reverse using
  sf::st_reverse if necessary (see example).
}
