% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/downstream_igraph_method.R
\name{all_downstream_routes_to_sea}
\alias{all_downstream_routes_to_sea}
\title{Find all downstream segments from a specified river segment, returning
  a list in the case of anabranching networks.}
\usage{
all_downstream_routes_to_sea(
  HSnetwork_sfnetworks,
  HSnetwork,
  ID,
  verbose = TRUE,
  ...
)
}
\arguments{
\item{HSnetwork_sfnetworks}{An input sfnetworks LINESTRING river network.}

\item{HSnetwork}{Corresponding LINESTRING river network.}

\item{ID}{The riverID from which to start the path to sea.}

\item{verbose}{Boolean. Print commentary of algorithm (useful for debugging).}

\item{...}{Any parameters relevant to igraph::all_simple_paths or
all_simple_paths_for_complex_graphs.}
}
\value{
A list of tables containing complete unique paths to sea from a user
  defined starting reach.
}
\description{
This function is a wrapper for
  all_simple_paths_for_complex_graphs to make finding all unique edge paths
  to sea entry easier. The function receives a sf LINESTRING that describes a
  river network and a reach riverID of interest. This object is converted by
  the function into an sfnetwork object, which contains an attribute tibble
  and corresponding directed acyclic graph (DAG) igraph component of nodes
  and edges (where each edge corresponds to a reach riverID). The function
  returns a list tables, each representing a unique path, containing a
  sequence of riverIDs ordered from the riverID of interest to all possible
  sea entry locations.
}
\details{
The primary motivation for this function is make it easier to work
  with the all_simple_paths_for_complex_graphs, by providing a
  a more intuitive set of arguments. In this way, the user does not need to
  pre-process their river network into an sfnetwork object and find the
  relevant from and to nodes associated with the igraph component of the
  object. Note that this method is designed for finding all possible "edge"
  paths from a reach of interest to the sea on a directed acyclic graph that
  may contain anabranching sections and multiple sea outlets (but not
  cycles). Like all_simple_paths_for_complex_graphs, this
  function fills the gap left by igraph::all_simple_paths, which only returns
  node paths for complex graphs, but receives and returns a more intuitive
  output for users of the sf package.
  
  This function is intended to facilitate river network analyses for river
  systems that contain anabranching/islands and/or multiple outlets, not
  "simple" dendritic (e.g., in relation to in-stream barriers). See other
  packages (e.g., riverconn), for analysis of simple dendritic graphs/river
  networks (e.g., CCM2).
}
